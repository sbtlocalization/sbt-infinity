// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * Most strings shown in Infinity Engine games are stored in a TLK file, usually dialog.tlk (for
 * male/default text) and/or dialogf.tlk (for female text). Strings are stored with associated
 * information (e.g. a reference to sound file), and are indexed by a (0-indexed) 32 bit identigier
 * called a "Strref" (String Reference). Storing text in this way allows for a game to be easily
 * swapped between languages.
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/tlk_v1.htm
 * ">Source</a>
 */
type Tlk struct {
	Magic []byte
	Version []byte
	Lang uint16
	NumEntries uint32
	OfsData uint32
	Entries []*Tlk_StringEntry
	_io *kaitai.Stream
	_root *Tlk
	_parent kaitai.Struct
}
func NewTlk() *Tlk {
	return &Tlk{
	}
}

func (this Tlk) IO_() *kaitai.Stream {
	return this._io
}

func (this *Tlk) Read(io *kaitai.Stream, parent kaitai.Struct, root *Tlk) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{84, 76, 75, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{84, 76, 75, 32}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 32, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 32, 32}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Lang = uint16(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumEntries = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsData = uint32(tmp5)
	for i := 0; i < int(this.NumEntries); i++ {
		_ = i
		tmp6 := NewTlk_StringEntry()
		err = tmp6.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp6)
	}
	return err
}
type Tlk_StringEntry struct {
	Flags *Tlk_StringEntry_Flags
	AudioName string
	VolumeVariance uint32
	PitchVariance uint32
	OfsString uint32
	LenString uint32
	_io *kaitai.Stream
	_root *Tlk
	_parent *Tlk
	_raw_Flags []byte
	_f_text bool
	text string
}
func NewTlk_StringEntry() *Tlk_StringEntry {
	return &Tlk_StringEntry{
	}
}

func (this Tlk_StringEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Tlk_StringEntry) Read(io *kaitai.Stream, parent *Tlk, root *Tlk) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp7 = tmp7
	this._raw_Flags = tmp7
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp8 := NewTlk_StringEntry_Flags()
	err = tmp8.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp8
	tmp9, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp9 = kaitai.BytesTerminate(tmp9, 0, false)
	this.AudioName = string(tmp9)
	tmp10, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.VolumeVariance = uint32(tmp10)
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.PitchVariance = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsString = uint32(tmp12)
	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenString = uint32(tmp13)
	return err
}
func (this *Tlk_StringEntry) Text() (v string, err error) {
	if (this._f_text) {
		return this.text, nil
	}
	this._f_text = true
	_pos, err := this._io.Pos()
	if err != nil {
		return "", err
	}
	_, err = this._io.Seek(int64(this._root.OfsData + this.OfsString), io.SeekStart)
	if err != nil {
		return "", err
	}
	tmp14, err := this._io.ReadBytes(int(this.LenString))
	if err != nil {
		return "", err
	}
	tmp14 = kaitai.BytesTerminate(tmp14, 0, false)
	this.text = string(tmp14)
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return "", err
	}
	return this.text, nil
}
type Tlk_StringEntry_Flags struct {
	TextExists bool
	SoundExists bool
	TokenExists bool
	_io *kaitai.Stream
	_root *Tlk
	_parent *Tlk_StringEntry
}
func NewTlk_StringEntry_Flags() *Tlk_StringEntry_Flags {
	return &Tlk_StringEntry_Flags{
	}
}

func (this Tlk_StringEntry_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Tlk_StringEntry_Flags) Read(io *kaitai.Stream, parent *Tlk_StringEntry, root *Tlk) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.TextExists = tmp15 != 0
	tmp16, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.SoundExists = tmp16 != 0
	tmp17, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.TokenExists = tmp17 != 0
	return err
}
