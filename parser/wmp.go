// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * This file format describes the top-level map structure of the game. It details the x/y coordinate
 * location of areas, the graphics used to represent the area on the map (both MOS and BAM ) and
 * stores flag information used to decide how the map icon is displayed (visable, reachable, already
 * visited etc.)
 * 
 * ## Engine specific notes:
 * Areas may be also displayed on the WorldMap in ToB using 2DA files:
 * - `XNEWAREA.2DA` (Area entries section of wmp )
 * - 2DA file specified in `XNEWAREA.2DA` (Area links section) for example `XL3000.2DA`
 * 
 * NB. A WMP file must have at least one area entry, and one area link to be considered valid.
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/wmap_v1.htm
 * ">Source</a>
 */
type Wmp struct {
	Magic []byte
	Version []byte
	NumWorldmapEntries uint32
	OfsWorldmapEntries uint32
	_io *kaitai.Stream
	_root *Wmp
	_parent kaitai.Struct
	_f_worldmapEntries bool
	worldmapEntries []*Wmp_WorldmapEntry
}
func NewWmp() *Wmp {
	return &Wmp{
	}
}

func (this Wmp) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp) Read(io *kaitai.Stream, parent kaitai.Struct, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{87, 77, 65, 80})) {
		return kaitai.NewValidationNotEqualError([]uint8{87, 77, 65, 80}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 46, 48})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 46, 48}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumWorldmapEntries = uint32(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsWorldmapEntries = uint32(tmp4)
	return err
}
func (this *Wmp) WorldmapEntries() (v []*Wmp_WorldmapEntry, err error) {
	if (this._f_worldmapEntries) {
		return this.worldmapEntries, nil
	}
	this._f_worldmapEntries = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsWorldmapEntries), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumWorldmapEntries); i++ {
		_ = i
		tmp5 := NewWmp_WorldmapEntry()
		err = tmp5.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.worldmapEntries = append(this.worldmapEntries, tmp5)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.worldmapEntries, nil
}
type Wmp_AreaEntry struct {
	Area string
	ShortName string
	LongName string
	Status *Wmp_AreaEntry_Status
	IconsBamSequence uint32
	X uint32
	Y uint32
	CaptionRef uint32
	TooltipRef uint32
	LoadingScreenMos string
	NorthLinkIndex uint32
	NumNorthLinks uint32
	WestLinkIndex uint32
	NumWestLinks uint32
	SouthLinkIndex uint32
	NumSouthLinks uint32
	EastLinkIndex uint32
	NumEastLinks uint32
	Reserved []byte
	_io *kaitai.Stream
	_root *Wmp
	_parent *Wmp_WorldmapEntry
	_raw_Status []byte
	_f_eastLinks bool
	eastLinks []*Wmp_AreaLinkEntry
	_f_northLinks bool
	northLinks []*Wmp_AreaLinkEntry
	_f_southLinks bool
	southLinks []*Wmp_AreaLinkEntry
	_f_westLinks bool
	westLinks []*Wmp_AreaLinkEntry
}
func NewWmp_AreaEntry() *Wmp_AreaEntry {
	return &Wmp_AreaEntry{
	}
}

func (this Wmp_AreaEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp_AreaEntry) Read(io *kaitai.Stream, parent *Wmp_WorldmapEntry, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp6 = kaitai.BytesTerminate(tmp6, 0, false)
	this.Area = string(tmp6)
	tmp7, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp7 = kaitai.BytesTerminate(tmp7, 0, false)
	this.ShortName = string(tmp7)
	tmp8, err := this._io.ReadBytes(int(32))
	if err != nil {
		return err
	}
	tmp8 = kaitai.BytesTerminate(tmp8, 0, false)
	this.LongName = string(tmp8)
	tmp9, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this._raw_Status = tmp9
	_io__raw_Status := kaitai.NewStream(bytes.NewReader(this._raw_Status))
	tmp10 := NewWmp_AreaEntry_Status()
	err = tmp10.Read(_io__raw_Status, this, this._root)
	if err != nil {
		return err
	}
	this.Status = tmp10
	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.IconsBamSequence = uint32(tmp11)
	tmp12, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.X = uint32(tmp12)
	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Y = uint32(tmp13)
	tmp14, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CaptionRef = uint32(tmp14)
	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TooltipRef = uint32(tmp15)
	tmp16, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp16 = kaitai.BytesTerminate(tmp16, 0, false)
	this.LoadingScreenMos = string(tmp16)
	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NorthLinkIndex = uint32(tmp17)
	tmp18, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumNorthLinks = uint32(tmp18)
	tmp19, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.WestLinkIndex = uint32(tmp19)
	tmp20, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumWestLinks = uint32(tmp20)
	tmp21, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SouthLinkIndex = uint32(tmp21)
	tmp22, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumSouthLinks = uint32(tmp22)
	tmp23, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.EastLinkIndex = uint32(tmp23)
	tmp24, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumEastLinks = uint32(tmp24)
	tmp25, err := this._io.ReadBytes(int(128))
	if err != nil {
		return err
	}
	tmp25 = tmp25
	this.Reserved = tmp25
	return err
}
func (this *Wmp_AreaEntry) EastLinks() (v []*Wmp_AreaLinkEntry, err error) {
	if (this._f_eastLinks) {
		return this.eastLinks, nil
	}
	this._f_eastLinks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._parent.OfsAreaLinkEntries + this.EastLinkIndex * 216), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumEastLinks); i++ {
		_ = i
		tmp26 := NewWmp_AreaLinkEntry()
		err = tmp26.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.eastLinks = append(this.eastLinks, tmp26)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.eastLinks, nil
}
func (this *Wmp_AreaEntry) NorthLinks() (v []*Wmp_AreaLinkEntry, err error) {
	if (this._f_northLinks) {
		return this.northLinks, nil
	}
	this._f_northLinks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._parent.OfsAreaLinkEntries + this.NorthLinkIndex * 216), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumNorthLinks); i++ {
		_ = i
		tmp27 := NewWmp_AreaLinkEntry()
		err = tmp27.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.northLinks = append(this.northLinks, tmp27)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.northLinks, nil
}
func (this *Wmp_AreaEntry) SouthLinks() (v []*Wmp_AreaLinkEntry, err error) {
	if (this._f_southLinks) {
		return this.southLinks, nil
	}
	this._f_southLinks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._parent.OfsAreaLinkEntries + this.SouthLinkIndex * 216), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumSouthLinks); i++ {
		_ = i
		tmp28 := NewWmp_AreaLinkEntry()
		err = tmp28.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.southLinks = append(this.southLinks, tmp28)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.southLinks, nil
}
func (this *Wmp_AreaEntry) WestLinks() (v []*Wmp_AreaLinkEntry, err error) {
	if (this._f_westLinks) {
		return this.westLinks, nil
	}
	this._f_westLinks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._parent.OfsAreaLinkEntries + this.WestLinkIndex * 216), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumWestLinks); i++ {
		_ = i
		tmp29 := NewWmp_AreaLinkEntry()
		err = tmp29.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.westLinks = append(this.westLinks, tmp29)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.westLinks, nil
}
type Wmp_AreaEntry_Status struct {
	Visible bool
	VisibleFromAdjacent bool
	Reachable bool
	Visited bool
	_io *kaitai.Stream
	_root *Wmp
	_parent *Wmp_AreaEntry
}
func NewWmp_AreaEntry_Status() *Wmp_AreaEntry_Status {
	return &Wmp_AreaEntry_Status{
	}
}

func (this Wmp_AreaEntry_Status) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp_AreaEntry_Status) Read(io *kaitai.Stream, parent *Wmp_AreaEntry, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp30, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Visible = tmp30 != 0
	tmp31, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.VisibleFromAdjacent = tmp31 != 0
	tmp32, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Reachable = tmp32 != 0
	tmp33, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Visited = tmp33 != 0
	return err
}

type Wmp_AreaLinkEntry_Entrance int
const (
	Wmp_AreaLinkEntry_Entrance__North Wmp_AreaLinkEntry_Entrance = 1
	Wmp_AreaLinkEntry_Entrance__East Wmp_AreaLinkEntry_Entrance = 2
	Wmp_AreaLinkEntry_Entrance__South Wmp_AreaLinkEntry_Entrance = 4
	Wmp_AreaLinkEntry_Entrance__West Wmp_AreaLinkEntry_Entrance = 8
)
var values_Wmp_AreaLinkEntry_Entrance = map[Wmp_AreaLinkEntry_Entrance]struct{}{1: {}, 2: {}, 4: {}, 8: {}}
func (v Wmp_AreaLinkEntry_Entrance) isDefined() bool {
	_, ok := values_Wmp_AreaLinkEntry_Entrance[v]
	return ok
}
type Wmp_AreaLinkEntry struct {
	DestinationAreaIndex uint32
	EntryPoint string
	TravelTime uint32
	DefaultEntrance Wmp_AreaLinkEntry_Entrance
	RandomEncounterArea1 string
	RandomEncounterArea2 string
	RandomEncounterArea3 string
	RandomEncounterArea4 string
	RandomEncounterArea5 string
	RandomEncounterProbability uint32
	Reserved []byte
	_io *kaitai.Stream
	_root *Wmp
	_parent *Wmp_AreaEntry
}
func NewWmp_AreaLinkEntry() *Wmp_AreaLinkEntry {
	return &Wmp_AreaLinkEntry{
	}
}

func (this Wmp_AreaLinkEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp_AreaLinkEntry) Read(io *kaitai.Stream, parent *Wmp_AreaEntry, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp34, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.DestinationAreaIndex = uint32(tmp34)
	tmp35, err := this._io.ReadBytes(int(32))
	if err != nil {
		return err
	}
	tmp35 = kaitai.BytesTerminate(tmp35, 0, false)
	this.EntryPoint = string(tmp35)
	tmp36, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TravelTime = uint32(tmp36)
	tmp37, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.DefaultEntrance = Wmp_AreaLinkEntry_Entrance(tmp37)
	tmp38, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp38 = kaitai.BytesTerminate(tmp38, 0, false)
	this.RandomEncounterArea1 = string(tmp38)
	tmp39, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp39 = kaitai.BytesTerminate(tmp39, 0, false)
	this.RandomEncounterArea2 = string(tmp39)
	tmp40, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp40 = kaitai.BytesTerminate(tmp40, 0, false)
	this.RandomEncounterArea3 = string(tmp40)
	tmp41, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp41 = kaitai.BytesTerminate(tmp41, 0, false)
	this.RandomEncounterArea4 = string(tmp41)
	tmp42, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp42 = kaitai.BytesTerminate(tmp42, 0, false)
	this.RandomEncounterArea5 = string(tmp42)
	tmp43, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RandomEncounterProbability = uint32(tmp43)
	tmp44, err := this._io.ReadBytes(int(128))
	if err != nil {
		return err
	}
	tmp44 = tmp44
	this.Reserved = tmp44
	return err
}
type Wmp_WorldmapEntry struct {
	BackgroundImageMos string
	Width uint32
	Height uint32
	MapNumber uint32
	AreaNameRef uint32
	CenterX uint32
	CenterY uint32
	NumAreaEntries uint32
	OfsAreaEntries uint32
	OfsAreaLinkEntries uint32
	NumAreaLinkEntries uint32
	MapIconsBam string
	Flags *Wmp_WorldmapEntry_Flags
	Reserved []byte
	_io *kaitai.Stream
	_root *Wmp
	_parent *Wmp
	_raw_Flags []byte
	_f_areaEntries bool
	areaEntries []*Wmp_AreaEntry
}
func NewWmp_WorldmapEntry() *Wmp_WorldmapEntry {
	return &Wmp_WorldmapEntry{
	}
}

func (this Wmp_WorldmapEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp_WorldmapEntry) Read(io *kaitai.Stream, parent *Wmp, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp45, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp45 = kaitai.BytesTerminate(tmp45, 0, false)
	this.BackgroundImageMos = string(tmp45)
	tmp46, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Width = uint32(tmp46)
	tmp47, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Height = uint32(tmp47)
	tmp48, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.MapNumber = uint32(tmp48)
	tmp49, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AreaNameRef = uint32(tmp49)
	tmp50, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CenterX = uint32(tmp50)
	tmp51, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.CenterY = uint32(tmp51)
	tmp52, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumAreaEntries = uint32(tmp52)
	tmp53, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsAreaEntries = uint32(tmp53)
	tmp54, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsAreaLinkEntries = uint32(tmp54)
	tmp55, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumAreaLinkEntries = uint32(tmp55)
	tmp56, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp56 = kaitai.BytesTerminate(tmp56, 0, false)
	this.MapIconsBam = string(tmp56)
	tmp57, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp57 = tmp57
	this._raw_Flags = tmp57
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp58 := NewWmp_WorldmapEntry_Flags()
	err = tmp58.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp58
	tmp59, err := this._io.ReadBytes(int(124))
	if err != nil {
		return err
	}
	tmp59 = tmp59
	this.Reserved = tmp59
	return err
}
func (this *Wmp_WorldmapEntry) AreaEntries() (v []*Wmp_AreaEntry, err error) {
	if (this._f_areaEntries) {
		return this.areaEntries, nil
	}
	this._f_areaEntries = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsAreaEntries), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumAreaEntries); i++ {
		_ = i
		tmp60 := NewWmp_AreaEntry()
		err = tmp60.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.areaEntries = append(this.areaEntries, tmp60)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.areaEntries, nil
}
type Wmp_WorldmapEntry_Flags struct {
	ColoredIcons bool
	IgnorePalette bool
	_io *kaitai.Stream
	_root *Wmp
	_parent *Wmp_WorldmapEntry
}
func NewWmp_WorldmapEntry_Flags() *Wmp_WorldmapEntry_Flags {
	return &Wmp_WorldmapEntry_Flags{
	}
}

func (this Wmp_WorldmapEntry_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Wmp_WorldmapEntry_Flags) Read(io *kaitai.Stream, parent *Wmp_WorldmapEntry, root *Wmp) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp61, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ColoredIcons = tmp61 != 0
	tmp62, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.IgnorePalette = tmp62 != 0
	return err
}
