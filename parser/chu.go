// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * This file format describes the layout of the GUI screens (the graphics for the screens are held
 * in MOS and BAM files).
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/chu_v1.htm
 * ">Source</a>
 */
type Chu struct {
	Magic []byte
	Version []byte
	NumWindows uint32
	OfsControls uint32
	OfsWindows uint32
	_io *kaitai.Stream
	_root *Chu
	_parent kaitai.Struct
	_f_windows bool
	windows []*Chu_Window
}
func NewChu() *Chu {
	return &Chu{
	}
}

func (this Chu) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu) Read(io *kaitai.Stream, parent kaitai.Struct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{67, 72, 85, 73})) {
		return kaitai.NewValidationNotEqualError([]uint8{67, 72, 85, 73}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 32, 32})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 32, 32}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumWindows = uint32(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsControls = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsWindows = uint32(tmp5)
	return err
}
func (this *Chu) Windows() (v []*Chu_Window, err error) {
	if (this._f_windows) {
		return this.windows, nil
	}
	this._f_windows = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsWindows), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumWindows); i++ {
		_ = i
		tmp6 := NewChu_Window()
		err = tmp6.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.windows = append(this.windows, tmp6)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.windows, nil
}
type Chu_Control struct {
	OfsData uint32
	LenData uint32
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Window
	_raw_data []byte
	_f_data bool
	data *Chu_Control_ControlStruct
}
func NewChu_Control() *Chu_Control {
	return &Chu_Control{
	}
}

func (this Chu_Control) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control) Read(io *kaitai.Stream, parent *Chu_Window, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OfsData = uint32(tmp7)
	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenData = uint32(tmp8)
	return err
}
func (this *Chu_Control) Data() (v *Chu_Control_ControlStruct, err error) {
	if (this._f_data) {
		return this.data, nil
	}
	this._f_data = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OfsData), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp9, err := this._io.ReadBytes(int(this.LenData))
	if err != nil {
		return nil, err
	}
	tmp9 = tmp9
	this._raw_data = tmp9
	_io__raw_data := kaitai.NewStream(bytes.NewReader(this._raw_data))
	tmp10 := NewChu_Control_ControlStruct()
	err = tmp10.Read(_io__raw_data, this, this._root)
	if err != nil {
		return nil, err
	}
	this.data = tmp10
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.data, nil
}

type Chu_Control_ControlStruct_StructType int
const (
	Chu_Control_ControlStruct_StructType__Button Chu_Control_ControlStruct_StructType = 0
	Chu_Control_ControlStruct_StructType__Slider Chu_Control_ControlStruct_StructType = 2
	Chu_Control_ControlStruct_StructType__TextEdit Chu_Control_ControlStruct_StructType = 3
	Chu_Control_ControlStruct_StructType__TextArea Chu_Control_ControlStruct_StructType = 5
	Chu_Control_ControlStruct_StructType__Label Chu_Control_ControlStruct_StructType = 6
	Chu_Control_ControlStruct_StructType__Scrollbar Chu_Control_ControlStruct_StructType = 7
)
var values_Chu_Control_ControlStruct_StructType = map[Chu_Control_ControlStruct_StructType]struct{}{0: {}, 2: {}, 3: {}, 5: {}, 6: {}, 7: {}}
func (v Chu_Control_ControlStruct_StructType) isDefined() bool {
	_, ok := values_Chu_Control_ControlStruct_StructType[v]
	return ok
}
type Chu_Control_ControlStruct struct {
	ControlId uint32
	X uint16
	Y uint16
	Width uint16
	Height uint16
	Type Chu_Control_ControlStruct_StructType
	_unnamed6 []byte
	Properties kaitai.Struct
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control
}
func NewChu_Control_ControlStruct() *Chu_Control_ControlStruct {
	return &Chu_Control_ControlStruct{
	}
}

func (this Chu_Control_ControlStruct) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct) Read(io *kaitai.Stream, parent *Chu_Control, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp11, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ControlId = uint32(tmp11)
	tmp12, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.X = uint16(tmp12)
	tmp13, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Y = uint16(tmp13)
	tmp14, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Width = uint16(tmp14)
	tmp15, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Height = uint16(tmp15)
	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Type = Chu_Control_ControlStruct_StructType(tmp16)
	tmp17, err := this._io.ReadBytes(int(1))
	if err != nil {
		return err
	}
	tmp17 = tmp17
	this._unnamed6 = tmp17
	switch (this.Type) {
	case Chu_Control_ControlStruct_StructType__Button:
		tmp18 := NewChu_Control_ControlStruct_Button()
		err = tmp18.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp18
	case Chu_Control_ControlStruct_StructType__Label:
		tmp19 := NewChu_Control_ControlStruct_Label()
		err = tmp19.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp19
	case Chu_Control_ControlStruct_StructType__Scrollbar:
		tmp20 := NewChu_Control_ControlStruct_Scrollbar()
		err = tmp20.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp20
	case Chu_Control_ControlStruct_StructType__Slider:
		tmp21 := NewChu_Control_ControlStruct_Slider()
		err = tmp21.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp21
	case Chu_Control_ControlStruct_StructType__TextArea:
		tmp22 := NewChu_Control_ControlStruct_TextArea()
		err = tmp22.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp22
	case Chu_Control_ControlStruct_StructType__TextEdit:
		tmp23 := NewChu_Control_ControlStruct_TextEdit()
		err = tmp23.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Properties = tmp23
	}
	return err
}
type Chu_Control_ControlStruct_Button struct {
	ImageBam string
	AnimationCycle uint8
	Flags *Chu_Control_ControlStruct_Button_Flags
	NormalFrameIndex uint8
	AnchorX1 uint8
	PressedFrameIndex uint8
	AnchorX2 uint8
	SelectedFrameIndex uint8
	AnchorY1 uint8
	DisabledFrameIndex uint8
	AnchorY2 uint8
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
	_raw_Flags []byte
}
func NewChu_Control_ControlStruct_Button() *Chu_Control_ControlStruct_Button {
	return &Chu_Control_ControlStruct_Button{
	}
}

func (this Chu_Control_ControlStruct_Button) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Button) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp24, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp24 = kaitai.BytesTerminate(tmp24, 0, false)
	this.ImageBam = string(tmp24)
	tmp25, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AnimationCycle = tmp25
	tmp26, err := this._io.ReadBytes(int(1))
	if err != nil {
		return err
	}
	tmp26 = tmp26
	this._raw_Flags = tmp26
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp27 := NewChu_Control_ControlStruct_Button_Flags()
	err = tmp27.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp27
	tmp28, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.NormalFrameIndex = tmp28
	tmp29, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AnchorX1 = tmp29
	tmp30, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.PressedFrameIndex = tmp30
	tmp31, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AnchorX2 = tmp31
	tmp32, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SelectedFrameIndex = tmp32
	tmp33, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AnchorY1 = tmp33
	tmp34, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.DisabledFrameIndex = tmp34
	tmp35, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.AnchorY2 = tmp35
	return err
}

/**
 * With no bits set the text is centred (horizontally and vertically)
 */
type Chu_Control_ControlStruct_Button_Flags struct {
	AlignLeft bool
	AlignRight bool
	AlignTop bool
	AlignBottom bool
	AnchorToZero bool
	ReduceTextSize bool
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct_Button
}
func NewChu_Control_ControlStruct_Button_Flags() *Chu_Control_ControlStruct_Button_Flags {
	return &Chu_Control_ControlStruct_Button_Flags{
	}
}

func (this Chu_Control_ControlStruct_Button_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Button_Flags) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct_Button, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignLeft = tmp36 != 0
	tmp37, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignRight = tmp37 != 0
	tmp38, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignTop = tmp38 != 0
	tmp39, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignBottom = tmp39 != 0
	tmp40, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AnchorToZero = tmp40 != 0
	tmp41, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ReduceTextSize = tmp41 != 0
	return err
}
type Chu_Control_ControlStruct_Label struct {
	InitialTextRef uint32
	Font string
	TextColor uint32
	OutlineColor uint32
	Flags *Chu_Control_ControlStruct_Label_Flags
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
	_raw_Flags []byte
}
func NewChu_Control_ControlStruct_Label() *Chu_Control_ControlStruct_Label {
	return &Chu_Control_ControlStruct_Label{
	}
}

func (this Chu_Control_ControlStruct_Label) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Label) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp42, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.InitialTextRef = uint32(tmp42)
	tmp43, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp43 = kaitai.BytesTerminate(tmp43, 0, false)
	this.Font = string(tmp43)
	tmp44, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextColor = uint32(tmp44)
	tmp45, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OutlineColor = uint32(tmp45)
	tmp46, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp46 = tmp46
	this._raw_Flags = tmp46
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp47 := NewChu_Control_ControlStruct_Label_Flags()
	err = tmp47.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp47
	return err
}
type Chu_Control_ControlStruct_Label_Flags struct {
	UseRgbColors bool
	TrueColor bool
	AlignHcenter bool
	AlignLeft bool
	AlightRight bool
	AlignTop bool
	AlignVcenter bool
	AlignBottom bool
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct_Label
}
func NewChu_Control_ControlStruct_Label_Flags() *Chu_Control_ControlStruct_Label_Flags {
	return &Chu_Control_ControlStruct_Label_Flags{
	}
}

func (this Chu_Control_ControlStruct_Label_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Label_Flags) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct_Label, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp48, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UseRgbColors = tmp48 != 0
	tmp49, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.TrueColor = tmp49 != 0
	tmp50, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignHcenter = tmp50 != 0
	tmp51, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignLeft = tmp51 != 0
	tmp52, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlightRight = tmp52 != 0
	tmp53, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignTop = tmp53 != 0
	tmp54, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignVcenter = tmp54 != 0
	tmp55, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.AlignBottom = tmp55 != 0
	return err
}
type Chu_Control_ControlStruct_Scrollbar struct {
	ImageBam string
	AnimationCycle uint16
	NormalUpArrowFrameIndex uint16
	PressedUpArrowFrameIndex uint16
	NormalDownArrowFrameIndex uint16
	PressedDownArrowFrameIndex uint16
	ThroughFrameIndex uint16
	SliderFrameIndex uint16
	AttachedTextAreaId uint32
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
}
func NewChu_Control_ControlStruct_Scrollbar() *Chu_Control_ControlStruct_Scrollbar {
	return &Chu_Control_ControlStruct_Scrollbar{
	}
}

func (this Chu_Control_ControlStruct_Scrollbar) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Scrollbar) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp56, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp56 = kaitai.BytesTerminate(tmp56, 0, false)
	this.ImageBam = string(tmp56)
	tmp57, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.AnimationCycle = uint16(tmp57)
	tmp58, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NormalUpArrowFrameIndex = uint16(tmp58)
	tmp59, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.PressedUpArrowFrameIndex = uint16(tmp59)
	tmp60, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NormalDownArrowFrameIndex = uint16(tmp60)
	tmp61, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.PressedDownArrowFrameIndex = uint16(tmp61)
	tmp62, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ThroughFrameIndex = uint16(tmp62)
	tmp63, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.SliderFrameIndex = uint16(tmp63)
	tmp64, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AttachedTextAreaId = uint32(tmp64)
	return err
}
type Chu_Control_ControlStruct_Slider struct {
	BackgroundImageMos string
	KnobImageBam string
	AnimationCycle uint16
	NormalSliderFrameIndex uint16
	GrabbedSliderFrameIndex uint16
	KnobX uint16
	KnobY uint16
	StepWidth uint16
	StepCount uint16
	RegionTop uint16
	RegionBottom uint16
	RegionLeft uint16
	RegionRight uint16
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
}
func NewChu_Control_ControlStruct_Slider() *Chu_Control_ControlStruct_Slider {
	return &Chu_Control_ControlStruct_Slider{
	}
}

func (this Chu_Control_ControlStruct_Slider) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_Slider) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp65, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp65 = kaitai.BytesTerminate(tmp65, 0, false)
	this.BackgroundImageMos = string(tmp65)
	tmp66, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp66 = kaitai.BytesTerminate(tmp66, 0, false)
	this.KnobImageBam = string(tmp66)
	tmp67, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.AnimationCycle = uint16(tmp67)
	tmp68, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NormalSliderFrameIndex = uint16(tmp68)
	tmp69, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.GrabbedSliderFrameIndex = uint16(tmp69)
	tmp70, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.KnobX = uint16(tmp70)
	tmp71, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.KnobY = uint16(tmp71)
	tmp72, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.StepWidth = uint16(tmp72)
	tmp73, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.StepCount = uint16(tmp73)
	tmp74, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RegionTop = uint16(tmp74)
	tmp75, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RegionBottom = uint16(tmp75)
	tmp76, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RegionLeft = uint16(tmp76)
	tmp77, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.RegionRight = uint16(tmp77)
	return err
}
type Chu_Control_ControlStruct_TextArea struct {
	InitialsFont string
	MainTextFont string
	TextColor uint32
	InitialsColor uint32
	OutlineColor uint32
	AttachedScrollbarId uint32
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
}
func NewChu_Control_ControlStruct_TextArea() *Chu_Control_ControlStruct_TextArea {
	return &Chu_Control_ControlStruct_TextArea{
	}
}

func (this Chu_Control_ControlStruct_TextArea) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_TextArea) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp78, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp78 = kaitai.BytesTerminate(tmp78, 0, false)
	this.InitialsFont = string(tmp78)
	tmp79, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp79 = kaitai.BytesTerminate(tmp79, 0, false)
	this.MainTextFont = string(tmp79)
	tmp80, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextColor = uint32(tmp80)
	tmp81, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.InitialsColor = uint32(tmp81)
	tmp82, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OutlineColor = uint32(tmp82)
	tmp83, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AttachedScrollbarId = uint32(tmp83)
	return err
}

type Chu_Control_ControlStruct_TextEdit_TextCase int
const (
	Chu_Control_ControlStruct_TextEdit_TextCase__SentenceCase Chu_Control_ControlStruct_TextEdit_TextCase = 0
	Chu_Control_ControlStruct_TextEdit_TextCase__UpperCase Chu_Control_ControlStruct_TextEdit_TextCase = 1
	Chu_Control_ControlStruct_TextEdit_TextCase__LowerCase Chu_Control_ControlStruct_TextEdit_TextCase = 2
)
var values_Chu_Control_ControlStruct_TextEdit_TextCase = map[Chu_Control_ControlStruct_TextEdit_TextCase]struct{}{0: {}, 1: {}, 2: {}}
func (v Chu_Control_ControlStruct_TextEdit_TextCase) isDefined() bool {
	_, ok := values_Chu_Control_ControlStruct_TextEdit_TextCase[v]
	return ok
}
type Chu_Control_ControlStruct_TextEdit struct {
	BackgroundImage1Mos string
	BackgroundImage2Mos string
	BackgroundImage3Mos string
	CursorBam string
	CursorAnimationCycle uint16
	CursorFrameIndex uint16
	X uint16
	Y uint16
	AttachedScrollbarId uint32
	Font string
	_unnamed10 []byte
	InitialText string
	MaxLength uint16
	TextCase Chu_Control_ControlStruct_TextEdit_TextCase
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Control_ControlStruct
}
func NewChu_Control_ControlStruct_TextEdit() *Chu_Control_ControlStruct_TextEdit {
	return &Chu_Control_ControlStruct_TextEdit{
	}
}

func (this Chu_Control_ControlStruct_TextEdit) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Control_ControlStruct_TextEdit) Read(io *kaitai.Stream, parent *Chu_Control_ControlStruct, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp84, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp84 = kaitai.BytesTerminate(tmp84, 0, false)
	this.BackgroundImage1Mos = string(tmp84)
	tmp85, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp85 = kaitai.BytesTerminate(tmp85, 0, false)
	this.BackgroundImage2Mos = string(tmp85)
	tmp86, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp86 = kaitai.BytesTerminate(tmp86, 0, false)
	this.BackgroundImage3Mos = string(tmp86)
	tmp87, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp87 = kaitai.BytesTerminate(tmp87, 0, false)
	this.CursorBam = string(tmp87)
	tmp88, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CursorAnimationCycle = uint16(tmp88)
	tmp89, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.CursorFrameIndex = uint16(tmp89)
	tmp90, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.X = uint16(tmp90)
	tmp91, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Y = uint16(tmp91)
	tmp92, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AttachedScrollbarId = uint32(tmp92)
	tmp93, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp93 = kaitai.BytesTerminate(tmp93, 0, false)
	this.Font = string(tmp93)
	tmp94, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp94 = tmp94
	this._unnamed10 = tmp94
	tmp95, err := this._io.ReadBytes(int(32))
	if err != nil {
		return err
	}
	tmp95 = kaitai.BytesTerminate(tmp95, 0, false)
	this.InitialText = string(tmp95)
	tmp96, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.MaxLength = uint16(tmp96)
	tmp97, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.TextCase = Chu_Control_ControlStruct_TextEdit_TextCase(tmp97)
	return err
}
type Chu_Window struct {
	WinId uint16
	_unnamed1 []byte
	X uint16
	Y uint16
	Width uint16
	Height uint16
	Flags *Chu_Window_Flags
	NumControls uint16
	BackgroundMos string
	FirstControlIndex uint16
	Options *Chu_Window_Options
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu
	_raw_Flags []byte
	_raw_Options []byte
	_f_controls bool
	controls []*Chu_Control
}
func NewChu_Window() *Chu_Window {
	return &Chu_Window{
	}
}

func (this Chu_Window) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Window) Read(io *kaitai.Stream, parent *Chu, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp98, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.WinId = uint16(tmp98)
	tmp99, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp99 = tmp99
	this._unnamed1 = tmp99
	tmp100, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.X = uint16(tmp100)
	tmp101, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Y = uint16(tmp101)
	tmp102, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Width = uint16(tmp102)
	tmp103, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Height = uint16(tmp103)
	tmp104, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp104 = tmp104
	this._raw_Flags = tmp104
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp105 := NewChu_Window_Flags()
	err = tmp105.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp105
	tmp106, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.NumControls = uint16(tmp106)
	tmp107, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp107 = kaitai.BytesTerminate(tmp107, 0, false)
	this.BackgroundMos = string(tmp107)
	tmp108, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.FirstControlIndex = uint16(tmp108)
	tmp109, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp109 = tmp109
	this._raw_Options = tmp109
	_io__raw_Options := kaitai.NewStream(bytes.NewReader(this._raw_Options))
	tmp110 := NewChu_Window_Options()
	err = tmp110.Read(_io__raw_Options, this, this._root)
	if err != nil {
		return err
	}
	this.Options = tmp110
	return err
}
func (this *Chu_Window) Controls() (v []*Chu_Control, err error) {
	if (this._f_controls) {
		return this.controls, nil
	}
	this._f_controls = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this._parent.OfsControls + uint32(this.FirstControlIndex) * 8), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumControls); i++ {
		_ = i
		tmp111 := NewChu_Control()
		err = tmp111.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.controls = append(this.controls, tmp111)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.controls, nil
}
type Chu_Window_Flags struct {
	HasBackground bool
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Window
}
func NewChu_Window_Flags() *Chu_Window_Flags {
	return &Chu_Window_Flags{
	}
}

func (this Chu_Window_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Window_Flags) Read(io *kaitai.Stream, parent *Chu_Window, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp112, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.HasBackground = tmp112 != 0
	return err
}
type Chu_Window_Options struct {
	DoNotDimBackground bool
	_io *kaitai.Stream
	_root *Chu
	_parent *Chu_Window
}
func NewChu_Window_Options() *Chu_Window_Options {
	return &Chu_Window_Options{
	}
}

func (this Chu_Window_Options) IO_() *kaitai.Stream {
	return this._io
}

func (this *Chu_Window_Options) Read(io *kaitai.Stream, parent *Chu_Window, root *Chu) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp113, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.DoNotDimBackground = tmp113 != 0
	return err
}
