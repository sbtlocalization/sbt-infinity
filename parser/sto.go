// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package parser

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)


/**
 * These files contain a description of the types of items and services available for sale in a given store, inn, tavern, or temple.
 * @see <a href="https://gibberlings3.github.io/iesdp/file_formats/ie_formats/sto_v1.htm
 * ">Source</a>
 */

type Sto_PurchasedItemType int
const (
	Sto_PurchasedItemType__BooksMisc Sto_PurchasedItemType = 0
	Sto_PurchasedItemType__AmuletsAndNecklaces Sto_PurchasedItemType = 1
	Sto_PurchasedItemType__Armor Sto_PurchasedItemType = 2
	Sto_PurchasedItemType__BeltsAndGirdles Sto_PurchasedItemType = 3
	Sto_PurchasedItemType__Boots Sto_PurchasedItemType = 4
	Sto_PurchasedItemType__Arrows Sto_PurchasedItemType = 5
	Sto_PurchasedItemType__BracersAndGauntlets Sto_PurchasedItemType = 6
	Sto_PurchasedItemType__HeadgearHelmsHatsAndOtherHeadWear Sto_PurchasedItemType = 7
	Sto_PurchasedItemType__KeysNotInIcewindDale Sto_PurchasedItemType = 8
	Sto_PurchasedItemType__Potions Sto_PurchasedItemType = 9
	Sto_PurchasedItemType__Rings Sto_PurchasedItemType = 10
	Sto_PurchasedItemType__Scrolls Sto_PurchasedItemType = 11
	Sto_PurchasedItemType__ShieldsNotInIwd Sto_PurchasedItemType = 12
	Sto_PurchasedItemType__Food Sto_PurchasedItemType = 13
	Sto_PurchasedItemType__BulletsForASling Sto_PurchasedItemType = 14
	Sto_PurchasedItemType__Bows Sto_PurchasedItemType = 15
	Sto_PurchasedItemType__Daggers Sto_PurchasedItemType = 16
	Sto_PurchasedItemType__MacesInBgThisIncludesClubs Sto_PurchasedItemType = 17
	Sto_PurchasedItemType__Slings Sto_PurchasedItemType = 18
	Sto_PurchasedItemType__SmallSwords Sto_PurchasedItemType = 19
	Sto_PurchasedItemType__LargeSwords Sto_PurchasedItemType = 20
	Sto_PurchasedItemType__Hammers Sto_PurchasedItemType = 21
	Sto_PurchasedItemType__MorningStars Sto_PurchasedItemType = 22
	Sto_PurchasedItemType__Flails Sto_PurchasedItemType = 23
	Sto_PurchasedItemType__Darts Sto_PurchasedItemType = 24
	Sto_PurchasedItemType__Axes Sto_PurchasedItemType = 25
	Sto_PurchasedItemType__Quarterstaff Sto_PurchasedItemType = 26
	Sto_PurchasedItemType__Crossbow Sto_PurchasedItemType = 27
	Sto_PurchasedItemType__HandToHandWeapons Sto_PurchasedItemType = 28
	Sto_PurchasedItemType__Spears Sto_PurchasedItemType = 29
	Sto_PurchasedItemType__Halberds2HandedPolearms Sto_PurchasedItemType = 30
	Sto_PurchasedItemType__CrossbowBolts Sto_PurchasedItemType = 31
	Sto_PurchasedItemType__CloaksAndRobes Sto_PurchasedItemType = 32
	Sto_PurchasedItemType__GoldPiecesNotAnInventory Sto_PurchasedItemType = 33
	Sto_PurchasedItemType__Gems Sto_PurchasedItemType = 34
	Sto_PurchasedItemType__Wands Sto_PurchasedItemType = 35
	Sto_PurchasedItemType__ContainersEyeBrokenArmor Sto_PurchasedItemType = 36
	Sto_PurchasedItemType__BooksBrokenShieldsBracelets Sto_PurchasedItemType = 37
	Sto_PurchasedItemType__FamiliarsBrokenSwordsEarrings Sto_PurchasedItemType = 38
	Sto_PurchasedItemType__TattoosPst Sto_PurchasedItemType = 39
	Sto_PurchasedItemType__LensesPst Sto_PurchasedItemType = 40
	Sto_PurchasedItemType__BucklersTeeth Sto_PurchasedItemType = 41
	Sto_PurchasedItemType__Candles Sto_PurchasedItemType = 42
	Sto_PurchasedItemType__Unknown0 Sto_PurchasedItemType = 43
	Sto_PurchasedItemType__ClubsIwd Sto_PurchasedItemType = 44
	Sto_PurchasedItemType__Unknown1 Sto_PurchasedItemType = 45
	Sto_PurchasedItemType__Unknown2 Sto_PurchasedItemType = 46
	Sto_PurchasedItemType__LargeShieldsIwd Sto_PurchasedItemType = 47
	Sto_PurchasedItemType__Unknown3 Sto_PurchasedItemType = 48
	Sto_PurchasedItemType__MediumShieldsIwd Sto_PurchasedItemType = 49
	Sto_PurchasedItemType__Notes Sto_PurchasedItemType = 50
	Sto_PurchasedItemType__Unknown4 Sto_PurchasedItemType = 51
	Sto_PurchasedItemType__Unknown5 Sto_PurchasedItemType = 52
	Sto_PurchasedItemType__SmallShieldsIwd Sto_PurchasedItemType = 53
	Sto_PurchasedItemType__Unknown6 Sto_PurchasedItemType = 54
	Sto_PurchasedItemType__TelescopesIwd Sto_PurchasedItemType = 55
	Sto_PurchasedItemType__DrinksIwd Sto_PurchasedItemType = 56
	Sto_PurchasedItemType__GreatSwordsIwd Sto_PurchasedItemType = 57
	Sto_PurchasedItemType__Container Sto_PurchasedItemType = 58
	Sto_PurchasedItemType__FurPelt Sto_PurchasedItemType = 59
	Sto_PurchasedItemType__LeatherArmor Sto_PurchasedItemType = 60
	Sto_PurchasedItemType__StuddedLeatherArmor Sto_PurchasedItemType = 61
	Sto_PurchasedItemType__ChainMail Sto_PurchasedItemType = 62
	Sto_PurchasedItemType__SplintMail Sto_PurchasedItemType = 63
	Sto_PurchasedItemType__HalfPlate Sto_PurchasedItemType = 64
	Sto_PurchasedItemType__FullPlate Sto_PurchasedItemType = 65
	Sto_PurchasedItemType__HideArmor Sto_PurchasedItemType = 66
	Sto_PurchasedItemType__Robe Sto_PurchasedItemType = 67
	Sto_PurchasedItemType__Unknown7 Sto_PurchasedItemType = 68
	Sto_PurchasedItemType__BastardSword Sto_PurchasedItemType = 69
	Sto_PurchasedItemType__Scarf Sto_PurchasedItemType = 70
	Sto_PurchasedItemType__FoodIwd2 Sto_PurchasedItemType = 71
	Sto_PurchasedItemType__Hat Sto_PurchasedItemType = 72
	Sto_PurchasedItemType__Gauntlet Sto_PurchasedItemType = 73
)
var values_Sto_PurchasedItemType = map[Sto_PurchasedItemType]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 4: {}, 5: {}, 6: {}, 7: {}, 8: {}, 9: {}, 10: {}, 11: {}, 12: {}, 13: {}, 14: {}, 15: {}, 16: {}, 17: {}, 18: {}, 19: {}, 20: {}, 21: {}, 22: {}, 23: {}, 24: {}, 25: {}, 26: {}, 27: {}, 28: {}, 29: {}, 30: {}, 31: {}, 32: {}, 33: {}, 34: {}, 35: {}, 36: {}, 37: {}, 38: {}, 39: {}, 40: {}, 41: {}, 42: {}, 43: {}, 44: {}, 45: {}, 46: {}, 47: {}, 48: {}, 49: {}, 50: {}, 51: {}, 52: {}, 53: {}, 54: {}, 55: {}, 56: {}, 57: {}, 58: {}, 59: {}, 60: {}, 61: {}, 62: {}, 63: {}, 64: {}, 65: {}, 66: {}, 67: {}, 68: {}, 69: {}, 70: {}, 71: {}, 72: {}, 73: {}}
func (v Sto_PurchasedItemType) isDefined() bool {
	_, ok := values_Sto_PurchasedItemType[v]
	return ok
}

type Sto_StoreType int
const (
	Sto_StoreType__Store Sto_StoreType = 0
	Sto_StoreType__Tavern Sto_StoreType = 1
	Sto_StoreType__Inn Sto_StoreType = 2
	Sto_StoreType__Temple Sto_StoreType = 3
	Sto_StoreType__Container Sto_StoreType = 5
)
var values_Sto_StoreType = map[Sto_StoreType]struct{}{0: {}, 1: {}, 2: {}, 3: {}, 5: {}}
func (v Sto_StoreType) isDefined() bool {
	_, ok := values_Sto_StoreType[v]
	return ok
}

type Sto_SupplyType int
const (
	Sto_SupplyType__Limited Sto_SupplyType = 0
	Sto_SupplyType__Infinite Sto_SupplyType = 1
)
var values_Sto_SupplyType = map[Sto_SupplyType]struct{}{0: {}, 1: {}}
func (v Sto_SupplyType) isDefined() bool {
	_, ok := values_Sto_SupplyType[v]
	return ok
}
type Sto struct {
	Magic []byte
	Version []byte
	Type Sto_StoreType
	NameRef uint32
	FlagsBits *Sto_Flags
	SellMarkup uint32
	BuyMarkup uint32
	DepreciationRate uint32
	StealFailure uint16
	Capacity uint16
	Unknown1 []byte
	OffsetPurchasedItems uint32
	NumPurchasedItems uint32
	OffsetItemsForSale uint32
	NumItemsForSale uint32
	Lore uint32
	IdPrice uint32
	RumoursTavern string
	OffsetDrinks uint32
	NumDrinks uint32
	RumoursTemple string
	RoomBits *Sto_RoomFlags
	RoomPricePeasant uint32
	RoomPriceMerchant uint32
	RoomPriceNoble uint32
	RoomPriceRoyal uint32
	OffsetCures uint32
	NumCures uint32
	Unknown2 []byte
	_io *kaitai.Stream
	_root *Sto
	_parent kaitai.Struct
	_raw_FlagsBits []byte
	_raw_RoomBits []byte
	_f_cures bool
	cures []*Sto_CureEntry
	_f_drinks bool
	drinks []*Sto_DrinkEntry
	_f_itemsForSale bool
	itemsForSale []*Sto_ItemForSaleEntry
	_f_purchasedItems bool
	purchasedItems []*Sto_PurchaseEntry
}
func NewSto() *Sto {
	return &Sto{
	}
}

func (this Sto) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto) Read(io *kaitai.Stream, parent kaitai.Struct, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Magic = tmp1
	if !(bytes.Equal(this.Magic, []uint8{83, 84, 79, 82})) {
		return kaitai.NewValidationNotEqualError([]uint8{83, 84, 79, 82}, this.Magic, this._io, "/seq/0")
	}
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Version = tmp2
	if !(bytes.Equal(this.Version, []uint8{86, 49, 46, 48})) {
		return kaitai.NewValidationNotEqualError([]uint8{86, 49, 46, 48}, this.Version, this._io, "/seq/1")
	}
	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Type = Sto_StoreType(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NameRef = uint32(tmp4)
	tmp5, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp5 = tmp5
	this._raw_FlagsBits = tmp5
	_io__raw_FlagsBits := kaitai.NewStream(bytes.NewReader(this._raw_FlagsBits))
	tmp6 := NewSto_Flags()
	err = tmp6.Read(_io__raw_FlagsBits, this, this._root)
	if err != nil {
		return err
	}
	this.FlagsBits = tmp6
	tmp7, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.SellMarkup = uint32(tmp7)
	tmp8, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.BuyMarkup = uint32(tmp8)
	tmp9, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.DepreciationRate = uint32(tmp9)
	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.StealFailure = uint16(tmp10)
	tmp11, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Capacity = uint16(tmp11)
	tmp12, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp12 = tmp12
	this.Unknown1 = tmp12
	tmp13, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OffsetPurchasedItems = uint32(tmp13)
	tmp14, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumPurchasedItems = uint32(tmp14)
	tmp15, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OffsetItemsForSale = uint32(tmp15)
	tmp16, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumItemsForSale = uint32(tmp16)
	tmp17, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Lore = uint32(tmp17)
	tmp18, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.IdPrice = uint32(tmp18)
	tmp19, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp19 = kaitai.BytesTerminate(tmp19, 0, false)
	this.RumoursTavern = string(tmp19)
	tmp20, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OffsetDrinks = uint32(tmp20)
	tmp21, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumDrinks = uint32(tmp21)
	tmp22, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp22 = kaitai.BytesTerminate(tmp22, 0, false)
	this.RumoursTemple = string(tmp22)
	tmp23, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp23 = tmp23
	this._raw_RoomBits = tmp23
	_io__raw_RoomBits := kaitai.NewStream(bytes.NewReader(this._raw_RoomBits))
	tmp24 := NewSto_RoomFlags()
	err = tmp24.Read(_io__raw_RoomBits, this, this._root)
	if err != nil {
		return err
	}
	this.RoomBits = tmp24
	tmp25, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RoomPricePeasant = uint32(tmp25)
	tmp26, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RoomPriceMerchant = uint32(tmp26)
	tmp27, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RoomPriceNoble = uint32(tmp27)
	tmp28, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.RoomPriceRoyal = uint32(tmp28)
	tmp29, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.OffsetCures = uint32(tmp29)
	tmp30, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.NumCures = uint32(tmp30)
	tmp31, err := this._io.ReadBytes(int(36))
	if err != nil {
		return err
	}
	tmp31 = tmp31
	this.Unknown2 = tmp31
	return err
}
func (this *Sto) Cures() (v []*Sto_CureEntry, err error) {
	if (this._f_cures) {
		return this.cures, nil
	}
	this._f_cures = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OffsetCures), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumCures); i++ {
		_ = i
		tmp32 := NewSto_CureEntry()
		err = tmp32.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.cures = append(this.cures, tmp32)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.cures, nil
}
func (this *Sto) Drinks() (v []*Sto_DrinkEntry, err error) {
	if (this._f_drinks) {
		return this.drinks, nil
	}
	this._f_drinks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OffsetDrinks), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumDrinks); i++ {
		_ = i
		tmp33 := NewSto_DrinkEntry()
		err = tmp33.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.drinks = append(this.drinks, tmp33)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.drinks, nil
}
func (this *Sto) ItemsForSale() (v []*Sto_ItemForSaleEntry, err error) {
	if (this._f_itemsForSale) {
		return this.itemsForSale, nil
	}
	this._f_itemsForSale = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OffsetItemsForSale), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumItemsForSale); i++ {
		_ = i
		tmp34 := NewSto_ItemForSaleEntry()
		err = tmp34.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.itemsForSale = append(this.itemsForSale, tmp34)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.itemsForSale, nil
}
func (this *Sto) PurchasedItems() (v []*Sto_PurchaseEntry, err error) {
	if (this._f_purchasedItems) {
		return this.purchasedItems, nil
	}
	this._f_purchasedItems = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(this.OffsetPurchasedItems), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0; i < int(this.NumPurchasedItems); i++ {
		_ = i
		tmp35 := NewSto_PurchaseEntry()
		err = tmp35.Read(this._io, this, this._root)
		if err != nil {
			return nil, err
		}
		this.purchasedItems = append(this.purchasedItems, tmp35)
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.purchasedItems, nil
}
type Sto_CureEntry struct {
	SpellFile string
	Price uint32
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
}
func NewSto_CureEntry() *Sto_CureEntry {
	return &Sto_CureEntry{
	}
}

func (this Sto_CureEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_CureEntry) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp36, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp36 = kaitai.BytesTerminate(tmp36, 0, false)
	this.SpellFile = string(tmp36)
	tmp37, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Price = uint32(tmp37)
	return err
}
type Sto_DrinkEntry struct {
	RumoursResourse string
	DrinkNameRef uint32
	Price uint32
	AlcoholicStrenght uint32
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
}
func NewSto_DrinkEntry() *Sto_DrinkEntry {
	return &Sto_DrinkEntry{
	}
}

func (this Sto_DrinkEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_DrinkEntry) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp38, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp38 = kaitai.BytesTerminate(tmp38, 0, false)
	this.RumoursResourse = string(tmp38)
	tmp39, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.DrinkNameRef = uint32(tmp39)
	tmp40, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Price = uint32(tmp40)
	tmp41, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AlcoholicStrenght = uint32(tmp41)
	return err
}
type Sto_Flags struct {
	UserAllowedBuy bool
	UserAllowedSell bool
	UserAllowedIdentifyItems bool
	UserAllowedSteal bool
	UserAllowedDonateMoney bool
	UserAllowedPurchaseCures bool
	UserAllowedPurchaseDrinks bool
	Unknown1 bool
	Unknown2 bool
	Qualuty1 bool
	Quality2 bool
	Unknown3 bool
	BuyFencedGoods bool
	ReputationNotAffectPrice bool
	ToggleItemRecharge bool
	UserAllowedSellCritical bool
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
}
func NewSto_Flags() *Sto_Flags {
	return &Sto_Flags{
	}
}

func (this Sto_Flags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_Flags) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp42, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedBuy = tmp42 != 0
	tmp43, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedSell = tmp43 != 0
	tmp44, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedIdentifyItems = tmp44 != 0
	tmp45, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedSteal = tmp45 != 0
	tmp46, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedDonateMoney = tmp46 != 0
	tmp47, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedPurchaseCures = tmp47 != 0
	tmp48, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedPurchaseDrinks = tmp48 != 0
	tmp49, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Unknown1 = tmp49 != 0
	tmp50, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Unknown2 = tmp50 != 0
	tmp51, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Qualuty1 = tmp51 != 0
	tmp52, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Quality2 = tmp52 != 0
	tmp53, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Unknown3 = tmp53 != 0
	tmp54, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.BuyFencedGoods = tmp54 != 0
	tmp55, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ReputationNotAffectPrice = tmp55 != 0
	tmp56, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.ToggleItemRecharge = tmp56 != 0
	tmp57, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.UserAllowedSellCritical = tmp57 != 0
	return err
}
type Sto_ItemFlags struct {
	Identified bool
	Unstealable bool
	Stolen bool
	Undroppable bool
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto_ItemForSaleEntry
}
func NewSto_ItemFlags() *Sto_ItemFlags {
	return &Sto_ItemFlags{
	}
}

func (this Sto_ItemFlags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_ItemFlags) Read(io *kaitai.Stream, parent *Sto_ItemForSaleEntry, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp58, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Identified = tmp58 != 0
	tmp59, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Unstealable = tmp59 != 0
	tmp60, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Stolen = tmp60 != 0
	tmp61, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Undroppable = tmp61 != 0
	return err
}
type Sto_ItemForSaleEntry struct {
	ItemFile string
	ExpirationTime uint16
	QuantityCharges1 uint16
	QuantityCharges2 uint16
	QuantityCharges3 uint16
	Flags *Sto_ItemFlags
	AmountStock uint32
	Supply Sto_SupplyType
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
	_raw_Flags []byte
}
func NewSto_ItemForSaleEntry() *Sto_ItemForSaleEntry {
	return &Sto_ItemForSaleEntry{
	}
}

func (this Sto_ItemForSaleEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_ItemForSaleEntry) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp62, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp62 = kaitai.BytesTerminate(tmp62, 0, false)
	this.ItemFile = string(tmp62)
	tmp63, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.ExpirationTime = uint16(tmp63)
	tmp64, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.QuantityCharges1 = uint16(tmp64)
	tmp65, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.QuantityCharges2 = uint16(tmp65)
	tmp66, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.QuantityCharges3 = uint16(tmp66)
	tmp67, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp67 = tmp67
	this._raw_Flags = tmp67
	_io__raw_Flags := kaitai.NewStream(bytes.NewReader(this._raw_Flags))
	tmp68 := NewSto_ItemFlags()
	err = tmp68.Read(_io__raw_Flags, this, this._root)
	if err != nil {
		return err
	}
	this.Flags = tmp68
	tmp69, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.AmountStock = uint32(tmp69)
	tmp70, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Supply = Sto_SupplyType(tmp70)
	return err
}
type Sto_PurchaseEntry struct {
	ItemType Sto_PurchasedItemType
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
}
func NewSto_PurchaseEntry() *Sto_PurchaseEntry {
	return &Sto_PurchaseEntry{
	}
}

func (this Sto_PurchaseEntry) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_PurchaseEntry) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp71, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.ItemType = Sto_PurchasedItemType(tmp71)
	return err
}
type Sto_RoomFlags struct {
	Peasant bool
	Merchant bool
	Noble bool
	Royal bool
	_io *kaitai.Stream
	_root *Sto
	_parent *Sto
}
func NewSto_RoomFlags() *Sto_RoomFlags {
	return &Sto_RoomFlags{
	}
}

func (this Sto_RoomFlags) IO_() *kaitai.Stream {
	return this._io
}

func (this *Sto_RoomFlags) Read(io *kaitai.Stream, parent *Sto, root *Sto) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp72, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Peasant = tmp72 != 0
	tmp73, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Merchant = tmp73 != 0
	tmp74, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Noble = tmp74 != 0
	tmp75, err := this._io.ReadBitsIntLe(1)
	if err != nil {
		return err
	}
	this.Royal = tmp75 != 0
	return err
}
